#!/usr/bin/env python3
"""
Utility to control mpv from the command line.


TIME FORMAT:
   For commands that accept TIME, valid time literals include.

   - ``10`` ten seconds.
   - ``-10m`` minus 10 minutes.
   - ``1.5h`` one and a half hours.
   - ``01:32:02`` one hour, 32minutes and 2 seconds.
"""
# Originally based on https://github.com/Duncaen/mpvctl
# Ported to Python3.

import argparse
import json
import os
import shutil
import subprocess
import sys

from typing import (
    Any,
    Dict,
    Generator,
    Sequence,
    Tuple,
)

# -----------------------------------------------------------------------------
# Generic Utilities


def time_string_parse(time_str: str) -> float:

    try:
        return float(time_str)
    except Exception:
        pass

    is_negative = time_str.startswith("-")
    if is_negative:
        time_str = time_str[1:]

    time_str_split = time_str.lower().split(":")
    if len(time_str_split) > 3:
        raise Exception(
            "Expected HH:MM:SS format, received {:d} groups, no more than 3 supported!".format(len(time_str_split))
        )

    time_eval = 0.0
    for i, arg in enumerate(reversed(time_str_split)):
        n = len(arg)
        while n > 0 and arg[n - 1].isalpha():
            n -= 1
        arg, arg_ext = arg[:n], arg[n:]

        if arg_ext:
            if arg_ext == "h":
                mul = 60 * 60
            elif arg_ext == "m":
                mul = 60
            elif arg_ext == "s":
                mul = 1
            else:
                raise Exception("Unknown extension '{:s}', expected a value in ['h', 'm', 's'] (case-insensitive)!")
        else:
            if i == 0:
                mul = 1
            elif i == 1:
                mul = 60
            elif i == 2:
                mul = 60 * 60
            else:
                raise Exception("Internal error")

        time_eval += float(arg) * float(mul)

    if is_negative:
        time_eval = -time_eval

    return time_eval


def move_to_trash(filepath: str) -> None:
    subprocess.check_call(["gio", "trash", filepath])


# -----------------------------------------------------------------------------
# MPV Generic Utilities

SOCKET = "/tmp/mpvsocket"

SOCKET_CMD: Tuple[str, ...] = ("",)
if shutil.which("socat"):
    SOCKET_CMD = ("socat", "-", SOCKET)
elif shutil.which("nc"):
    SOCKET_CMD = ("nc", "-U", "-N", SOCKET)
else:
    sys.stderr.write('Cannot find "socat" or "nc" on your $PATH.')
    sys.exit(1)


def socket_command(json_str: str) -> str:
    from subprocess import PIPE

    with subprocess.Popen(SOCKET_CMD, stdout=PIPE, stderr=PIPE, stdin=PIPE) as proc:
        out, _err = proc.communicate(input=json_str.encode("utf-8"))
    return out.decode("utf-8")


def socket_command_list(json_str: Sequence[str]) -> Sequence[str]:
    result = socket_command("".join(json_str))
    return result.rstrip("\n").rsplit("\n")


def socket_command_as_json_data(json_str: str) -> Dict[str, Any]:
    result = socket_command(json_str)
    result_dict = json.loads(result)
    assert isinstance(result_dict, dict)
    return result_dict


def socket_command_list_as_json_data(json_str_list: Sequence[str]) -> Sequence[Dict[str, Any]]:
    result_list = socket_command_list(json_str_list)
    return [json.loads(result) for result in result_list]


def command(args: Sequence[str]) -> str:
    # JSON preamble.
    tosend = '{"command": [' + ", ".join(['"{:s}"'.format(a) for a in args]) + "]}\n"
    return socket_command(tosend)


def property_string_get(prop_id: str) -> Any:
    """
    accepted properties:
       filename, idle-active, playlist-count, playlist-pos, playback-time,
       playtime-remaining, time-remaining, percent-pos,
       duration, volume.
    """
    json_str = '{{ "command": ["get_property_string", "{:s}"] }}\n'.format(prop_id)
    result_dict = socket_command_as_json_data(json_str)
    return result_dict["data"]


# -----------------------------------------------------------------------------
# MPV Controls


def playback_time_set(time: float) -> None:
    json_str = '{{"command": ["set_property", "playback-time", {:f}]}}\n'.format(time)
    # TODO: check result?
    socket_command(json_str)


def cmd_seek(time_delta: str) -> None:
    time_curr = float(property_string_get("playback-time"))
    time_delta_eval = time_string_parse(time_delta)
    playback_time_set(time_curr + time_delta_eval)


def cmd_trash_current() -> None:
    result_path, _result_remove = socket_command_list_as_json_data(
        (
            # Get the path (to delete).
            '{"command": ["get_property_string", "path"]}\n',
            # Remove the currently playing file.
            '{"command": ["playlist-remove", "current"]}\n',
        )
    )

    filepath = result_path["data"]
    move_to_trash(filepath)


def playlist_files_add(files: Sequence[str], replace: bool) -> None:
    for i, filepath in enumerate(files):
        command(("loadfile", filepath, "replace" if (replace and i == 0) else "append-play"))


def cmd_add(files: Sequence[str], replace: bool) -> None:
    # Without this, it's not convenient to add files in the current directory for e.g.
    # Which is common when passing `*` for e.g.
    files = [os.path.abspath(filepath) for filepath in files]
    playlist_files_add(files, replace)


def playlist_index_set(index: int) -> None:
    json_str = '{{"command": ["playlist-play-index", {:d}]}}\n'.format(index)
    socket_command(json_str)


# -----------------------------------------------------------------------------
# MPV Stash Push Pop

STASH_DIR = os.path.expanduser("~/.local/share/mpvctl/stash")
STASH_BASE = "mpv_stash_"
STASH_EXT = ".pickle"


def stash_unique_time_hex() -> str:
    import datetime

    return hex(int((datetime.datetime.utcnow() - datetime.datetime(2020, 1, 1)).total_seconds() * 100))[2:]


def is_hex(text: str) -> bool:
    import string

    return all(c in string.hexdigits for c in text)


def stash_filename_create() -> str:
    return os.path.join(STASH_DIR, STASH_BASE) + stash_unique_time_hex() + STASH_EXT


def stash_description_create(
    playlist_files: Sequence[str], playlist_index: int, playback_time: float, playback_duration: float, media_title: str
) -> str:
    """
    Create a human readable description of this stash.
    """

    if len(playlist_files) > 1:
        commonpath = os.path.commonpath(playlist_files)
    else:
        commonpath = os.path.dirname(playlist_files[0])

    # TODO: abbreviate mount points?
    # For now only expand home dir.

    userdir = os.path.expanduser("~").rstrip(os.sep)
    if commonpath.startswith(userdir):
        commonpath = "~" + commonpath[len(userdir) :]

    # Only include the track number when not playing a single file.
    if len(playlist_files) > 1:
        track_str = ", track:{:d}".format(playlist_index)
    else:
        track_str = ""

    return '[{:s}] {:d}%{:s} in "{:s}"'.format(
        media_title,
        int((playback_time / playback_duration) * 100.0),
        track_str,
        commonpath,
    )


StashType = Dict[str, Any]


def stash_file_read(filepath: str) -> StashType:
    import pickle

    with open(filepath, "rb") as fh:
        manifest: StashType = pickle.load(fh)
    return manifest


def stash_file_write(filepath: str, data: StashType) -> None:
    import pickle

    with open(filepath, "wb") as fh:
        pickle.dump(data, fh)


def stash_iter_with_internal_num() -> Generator[Tuple[int, str], None, None]:
    if os.path.exists(STASH_DIR):
        for entry in os.scandir(STASH_DIR):
            name = entry.name
            if name.startswith(STASH_BASE) and name.endswith(STASH_EXT):
                num = name[len(STASH_BASE) : -len(STASH_EXT)]
                if is_hex(num):
                    yield int(num, 16), entry.path


def stash_iter_with_index() -> Generator[Tuple[int, str], None, None]:
    for index, (_num_val, path) in enumerate(sorted(stash_iter_with_internal_num(), reverse=True)):
        yield index, path


def cmd_stash_list() -> None:
    print("Stash list:")
    for index, path in stash_iter_with_index():
        stash_data = stash_file_read(path)
        print(" ", index, stash_data["description"])


def cmd_stash_push() -> None:
    # Hypothetically the file could already exist, in practice this means stashing twice in 1/100th of a second.
    import time

    while os.path.exists(filepath := stash_filename_create()):
        time.sleep(0.01)

    result_list = socket_command_list_as_json_data(
        (
            '{"command": ["get_property", "playlist"]}\n',
            '{"command": ["get_property", "playlist-pos"]}\n',
            '{"command": ["get_property", "playback-time"]}\n',
            '{"command": ["get_property", "duration"]}\n',
            '{"command": ["get_property", "media-title"]}\n',
        )
    )

    playlist_files = [item["filename"] for item in result_list[0]["data"]]
    playlist_index = result_list[1]["data"]
    playback_time = result_list[2]["data"]
    playback_duration = result_list[3]["data"]
    media_title = result_list[4]["data"]

    stash_data = {
        "description": stash_description_create(
            playlist_files,
            playlist_index,
            playback_time,
            playback_duration,
            media_title,
        ),
        "files": playlist_files,
        "playlist-pos": playlist_index,
        "playback-time": playback_time,
    }

    if not os.path.exists(STASH_DIR):
        os.makedirs(STASH_DIR)

    stash_file_write(filepath, stash_data)


def stash_pop_impl(index: int, play: bool = True, remove: bool = True) -> None:
    """
    Stash pop: play=True, remove=True
    Stash peek: play=True, remove=False
    Stash drop: play=False, remove=True
    """
    import time

    filepath = ""
    for index_iter, path in stash_iter_with_index():
        if index_iter == index:
            filepath = path
            break

    if filepath:
        if play:
            stash_data = stash_file_read(filepath)
            description = stash_data["description"]

            if remove:
                if play:
                    action = "Pop"
                else:
                    action = "Drop"
            else:
                action = "Peek"

            print(action, description)
            del action

            playlist_files = stash_data["files"]
            playlist_index = stash_data["playlist-pos"]
            playback_time = stash_data["playback-time"]

            command(("set", "pause", "yes"))
            command(("set", "ao-mute", "yes"))
            playlist_files_add(playlist_files, True)
            time.sleep(0.35)
            playlist_index_set(playlist_index)
            time.sleep(0.35)
            playback_time_set(playback_time)
            command(("set", "ao-mute", "no"))
            command(("set", "pause", "no"))
        if remove:
            os.remove(filepath)
        return

    if index != -1:
        print("Stash {:d} does not exist!".format(index))
    else:
        print("No stashes left!")


def cmd_stash_pop(index: int) -> None:
    stash_pop_impl(index, play=True, remove=True)


def cmd_stash_peek(index: int) -> None:
    stash_pop_impl(index, play=True, remove=False)


def cmd_stash_drop(index: int) -> None:
    stash_pop_impl(index, play=False, remove=True)


# -----------------------------------------------------------------------------
# Sub-Parser Implementations


def ensure_non_negative_int(value: str) -> int:
    ivalue = int(value)
    if ivalue < -1:
        raise argparse.ArgumentTypeError("%s is an invalid positive int value" % value)
    return ivalue


def argparse_create_quit(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser("quit", help="Quit the 'mpv' instance.")
    subparse.set_defaults(func=lambda args: command(("quit",)))


def argparse_create_play(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser("play", help="Start playing.")
    subparse.set_defaults(func=lambda args: command(("set", "pause", "yes")))


def argparse_create_pause(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser("pause", help="Stop playing.")
    subparse.set_defaults(func=lambda args: command(("set", "pause", "no")))


def argparse_create_play_pause(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser("play-pause", help="Toggle between play & pause.")
    subparse.set_defaults(func=lambda args: command(("cycle", "pause")))


def argparse_create_next(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser("next", help="Play the next item in the playlist.")
    subparse.set_defaults(func=lambda args: command(("playlist_next",)))


def argparse_create_prev(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser("prev", help="Play the previous item in the playlist.")
    subparse.set_defaults(func=lambda args: command(("playlist_prev",)))


def argparse_create_seek(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]", is_help: bool) -> None:
    subparse = subparsers.add_parser(
        "seek",
        # Dummy prefix chars! Needed so `-10s` isn't seen as an argument.
        prefix_chars="-" if is_help else "_",
        help="Seek relative to the current playback position.",
    )
    subparse.add_argument(
        dest="time_delta",
        metavar="TIME",
        help="Time string (see TIME format)",
    )
    subparse.set_defaults(func=lambda args: cmd_seek(args.time_delta))


def argparse_create_add(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser("add", help="Add file(s) to the playlist.")
    subparse.add_argument(
        "--replace",
        dest="replace",
        default=False,
        action="store_true",
        required=False,
        help="Replace the current playlist instead of adding to the current playlist.",
    )
    subparse.add_argument(
        dest="files",
        nargs="+",
        metavar="FILES",
        help="One or more file-paths, with support for paths relative to the current working directory.",
    )
    subparse.set_defaults(func=lambda args: cmd_add(args.files, args.replace))


def argparse_create_stash(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser("stash", help="Stash the current state and clear the playlist.")
    subparse.set_defaults(func=lambda args: cmd_stash_push())

    subsubparsers = subparse.add_subparsers(
        title="sub-sub-commands",
        description="valid stash sub-commands",
        help="Stash additional help",
    )

    def stash_index_arg(subparse: "argparse.ArgumentParser") -> None:
        subparse.add_argument(
            dest="index",
            type=ensure_non_negative_int,
            default=0,
            metavar="INDEX",
            help="The index to pop (pop the last pushed when omitted).",
        )

    # Stash `list`.
    subparse = subsubparsers.add_parser("list", help="List stashes.")
    subparse.set_defaults(func=lambda args: cmd_stash_list())

    # Stash `drop`.
    subparse = subsubparsers.add_parser("drop", help="Drop the last stash, optionally by index.")
    stash_index_arg(subparse)
    subparse.set_defaults(func=lambda args: cmd_stash_drop(args.index))

    # Stash `pop`.
    subparse = subsubparsers.add_parser("pop", help="Pop the stash (removing it from the file-system).")
    stash_index_arg(subparse)
    subparse.set_defaults(func=lambda args: cmd_stash_pop(args.index))

    # Stash `peek`.
    subparse = subsubparsers.add_parser("peek", help="Load the stash (without removing it).")
    stash_index_arg(subparse)
    subparse.set_defaults(func=lambda args: cmd_stash_peek(args.index))


def argparse_create_trash_current(subparsers: "argparse._SubParsersAction[argparse.ArgumentParser]") -> None:
    subparse = subparsers.add_parser(
        "trash-current",
        help="Move the file that is currently playing to the trash.",
    )
    subparse.set_defaults(func=lambda args: cmd_trash_current())


# -----------------------------------------------------------------------------
# Argument Parser


def argparse_create(is_help: bool) -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawTextHelpFormatter,
    )

    subparsers = parser.add_subparsers(
        title="subcommands",
        description="valid sub-commands",
        help="additional help",
    )
    argparse_create_quit(subparsers)
    argparse_create_pause(subparsers)
    argparse_create_play(subparsers)
    argparse_create_play_pause(subparsers)
    argparse_create_next(subparsers)
    argparse_create_prev(subparsers)

    argparse_create_seek(subparsers, is_help)

    argparse_create_add(subparsers)

    argparse_create_stash(subparsers)

    argparse_create_trash_current(subparsers)

    return parser


# -----------------------------------------------------------------------------
# Main Function


def main() -> None:

    # # HACK: add a default positional argument?
    if len(sys.argv) > 1 and sys.argv[-2] == "stash" and sys.argv[-1] in {"pop", "drop", "peek"}:
        sys.argv.append("0")

    is_help = "--help" in sys.argv
    parser = argparse_create(is_help)
    args = parser.parse_args()

    # call subparser callback
    if not hasattr(args, "func"):
        parser.print_help()
        return

    args.func(args)


if __name__ == "__main__":
    main()
