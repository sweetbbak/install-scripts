[[language]]
name = "bash"
scope = "source.bash"
injection-regex = "(shell|bash|zsh|sh)"
file-types = ["sh", "bash", "zsh", ".bash_login", ".bash_logout", ".bash_profile", ".bashrc", ".profile", ".zshenv", ".zlogin", ".zlogout", ".zprofile", ".zshrc", "APKBUILD", "PKGBUILD", "eclass", "ebuild", "bazelrc", ".bash_aliases"]
shebangs = ["sh", "bash", "dash", "zsh"]
roots = []
comment-token = "#"
language-server = { command = "bash-language-server", args = ["start"] }
indent = { tab-width = 4, unit = "    " }

# [[language]]
# name = "python"
# rulers = [90]
# auto-format = true
# language-server = {command = "pylsp"}
# config = { pylsp.plugins.flake8.enabled = false }

[[language]]
name = "yaml"
auto-format = true
# language-server = {command = "yaml-language-server"}

[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
auto-format = true
comment-token = "//"
language-server = { command = "rust-analyzer" }
indent = { tab-width = 4, unit = "    " }

[language.config.checkOnSave]
command = "clippy"

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'

[language.debugger]
name = "lldb-vscode"
transport = "stdio"
command = "lldb-vscode"

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { program = "{0}" }

[[language.debugger.templates]]
name = "binary (terminal)"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { program = "{0}", runInTerminal = true }

[[language.debugger.templates]]
name = "attach"
request = "attach"
completion = [ "pid" ]
args = { pid = "{0}" }

[[language.debugger.templates]]
name = "gdbserver attach"
request = "attach"
completion = [ { name = "lldb connect url", default = "connect://localhost:3333" }, { name = "file", completion = "filename" }, "pid" ]
args = { attachCommands = [ "platform select remote-gdb-server", "platform connect {0}", "file {1}", "attach {2}" ] }

[[grammar]]
name = "rust"
source = { git = "https://github.com/tree-sitter/tree-sitter-rust", rev = "0431a2c60828731f27491ee9fdefe25e250ce9c9" }


[[language]]
name = "c"
scope = "source.c"
injection-regex = "c"
file-types = ["c"] # TODO: ["h"]
roots = []
comment-token = "//"
language-server = { command = "clangd" }
# auto-format = true
# formatter = {command = 'clangd-format', args = ['-style=WebKit']}
formatter = {command = 'clangd-format', args = ['-style=Microsoft']}
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "cpp"
scope = "source.c"
injection-regex = "c"
file-types = ["cc", "cxx", "cpp"] # TODO: ["h"]
roots = ["compile_commands.json"]
comment-token = "//"

#language-server = { command = "clangd" }
language-server = { command = "/usr/local/opt/llvm/bin/clangd --fallback-style=WebKit" }
indent = { tab-width = 4, unit = " " }

[[language]]
name = "python"
roots = ["pyproject.toml", "setup.py", "Poetry.lock", ".git"]
# language-server = { command = "pyright-langserver", args = ["--stdio"] }
language-server = { command = "/home/sweet/.local/share/nvim/mason/bin/pylsp" }
auto-format = true
formatter = {command = 'black', args = ["--quiet", "-"]}
config = ""

# [language.formatter]
# command = "black"
# args = [
# "-", # stdin
# "--quiet",
# "--line-length=90",
# ]

# pylsp = { command = "pylsp" }

# [[language]]
# name = "python"
# scope = "source.python"
# injection-regex = "python"
# file-types = ["py","pyi","py3","pyw","ptl",".pythonstartup",".pythonrc","SConstruct"]
# shebangs = ["python"]
# roots = []
# comment-token = "#"
# auto-format = true
# language-server = { command = "pyright-langserver", args = ["--stdio"] }
# # language-servers = { command = ["pylsp"] }
# # language-server = { command = "pylsp" }
# # TODO: pyls needs utf-8 offsets
# indent = { tab-width = 4, unit = "    " }

# [[grammar]]
# name = "python"
# source = { git = "https://github.com/tree-sitter/tree-sitter-python", rev = "de221eccf9a221f5b85474a553474a69b4b5784d" }

# [language.formatter]
# command = "black"
# args = [
# "-", # stdin
# "--quiet",
# "--line-length=90",
# ]

[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }

[[language]]
name = "javascript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "typescript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "markdown"
formatter = { command = 'prettier', args = ["--parser", "markdown"] }
auto-format = true

[[language]]
name = "hcl"
formatter = { command = 'terraform', args = ["fmt", "-"] }
auto-format = true

[[language]]
name = "tfvars"
formatter = { command = 'terraform', args = ["fmt", "-"] }
auto-format = true
